#ifndef PSANA_ARCHON_DDL_H
#define PSANA_ARCHON_DDL_H 1

// *** Do not edit this file, it is auto-generated ***

#include <vector>
#include <iosfwd>
#include <cstring>
#include "ndarray/ndarray.h"
#include "pdsdata/xtc/TypeId.hh"
namespace Psana {
namespace Archon {

/** @class ConfigV1

  Class containing configuration data for CCDs using the Archon controller.
*/


class ConfigV1 {
public:
  enum { TypeId = Pds::TypeId::Id_ArchonConfig /**< XTC type ID value (from Pds::TypeId class) */ };
  enum { Version = 1 /**< XTC type version number */ };
  enum { FILENAME_CHAR_MAX = 256 };
  enum ReadoutMode {
    Single = 0,
    Continuous = 1,
    Triggered = 2,
  };
  virtual ~ConfigV1();
  virtual Archon::ConfigV1::ReadoutMode readoutMode() const = 0;
  virtual uint16_t sweepCount() const = 0;
  virtual uint32_t integrationTime() const = 0;
  virtual uint32_t nonIntegrationTime() const = 0;
  virtual uint32_t preSkipPixels() const = 0;
  virtual uint32_t pixels() const = 0;
  virtual uint32_t postSkipPixels() const = 0;
  virtual uint32_t overscanPixels() const = 0;
  virtual uint16_t preSkipLines() const = 0;
  virtual uint16_t lines() const = 0;
  virtual uint16_t postSkipLines() const = 0;
  virtual uint16_t overScanLines() const = 0;
  virtual uint16_t horizontalBinning() const = 0;
  virtual uint16_t verticalBinning() const = 0;
  virtual uint16_t rgh() const = 0;
  virtual uint16_t rgl() const = 0;
  virtual uint16_t shp() const = 0;
  virtual uint16_t shd() const = 0;
  virtual uint16_t st() const = 0;
  virtual uint16_t stm1() const = 0;
  virtual uint16_t at() const = 0;
  virtual uint16_t dwell1() const = 0;
  virtual uint16_t dwell2() const = 0;
  virtual int16_t rgHigh() const = 0;
  virtual int16_t rgLow() const = 0;
  virtual int16_t sHigh() const = 0;
  virtual int16_t sLow() const = 0;
  virtual int16_t aHigh() const = 0;
  virtual int16_t aLow() const = 0;
  virtual int16_t rgSlew() const = 0;
  virtual int16_t sSlew() const = 0;
  virtual int16_t aSlew() const = 0;
  /** The path to an acf file to use with the camera. */
  virtual const char* config() const = 0;
};
std::ostream& operator<<(std::ostream& str, Archon::ConfigV1::ReadoutMode enval);
} // namespace Archon
} // namespace Psana
#endif // PSANA_ARCHON_DDL_H
